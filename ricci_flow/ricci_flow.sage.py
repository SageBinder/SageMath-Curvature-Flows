

# This file was *autogenerated* from the file ricci_flow.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_0p1 = RealNumber('0.1'); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0p01 = RealNumber('0.01'); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_0p021 = RealNumber('0.021'); _sage_const_0p598 = RealNumber('0.598'); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_0p0001 = RealNumber('0.0001'); _sage_const_3001 = Integer(3001); _sage_const_10 = Integer(10)
import numpy as np
import os
import logging

# logging.disable(logging.INFO)

pi = RR.pi()

plot_initial_curve = True
plot_initial_m = True
plot_initial_h = True
plot_initial_R = True
plot_initial_K = True

animate_curve = True
animate_m = True
animate_h = True
animate_R = False
# animate_K = True

folder_name = "./Fig3_flow_2"
print(f"Using folder: {folder_name}")
if not os.path.exists(folder_name):
    print("Folder did not exist. Creating...")
    os.mkdir(folder_name)

def path(name):
    return os.path.join(folder_name, name)


def revolve(x, y):
    # x/y are reversed to rotate around z axis
    return (lambda u, v: y(v)*cos(u), lambda u, v: y(v)*sin(u), lambda u, v: x(v))


def xy_splines_from_hm(h, m, srange=(_sage_const_0 , pi), step_size=_sage_const_0p1 ):
    def y(rho):
        if m(rho) < _sage_const_0 :
            logging.debug(f"\tMaking xy splines from hm, encountered negative: ({rho}, {m(rho)}). Returning 0.")
            return _sage_const_0 
        return sqrt(m(rho))
    
    rho_space, drho = np.linspace(srange[_sage_const_0 ], srange[_sage_const_1 ], round((srange[_sage_const_1 ] - srange[_sage_const_0 ]) / step_size), retstep=True)
    y_spline = spline([(rho, y(rho)) for rho in rho_space])
    
    def x_integral(rho1, rho2):
        def integrand(s):
            d = h(s) - (y_spline.derivative(s))**_sage_const_2 
            return sqrt(d) if d > _sage_const_0  else _sage_const_0 
        return numerical_integral(integrand, rho1, rho2)[_sage_const_0 ]

    x_spline_list = [(rho_space[_sage_const_0 ], x_integral(_sage_const_0 , rho_space[_sage_const_0 ]))]
    for rho in rho_space[_sage_const_1 :]:
        last_rho = x_spline_list[-_sage_const_1 ][_sage_const_0 ]
        last_x = x_spline_list[-_sage_const_1 ][_sage_const_1 ]
        x_spline_list.append((rho, last_x + x_integral(last_rho, rho)))
    x_spline = spline(x_spline_list)
    
    return x_spline, y_spline


def sqrt_spline(f):
    return spline([(x, sqrt(y)) for x, y in f])


def to_spline(f, srange=(_sage_const_0 , pi), step_size=_sage_const_0p01 ):
    return spline([(s, f(s)) for s in np.linspace(srange[_sage_const_0 ], srange[_sage_const_1 ], round((srange[_sage_const_1 ] - srange[_sage_const_0 ]) / step_size))])


def hm_to_ricci_tensor(h, m, return_K=False, eps=_sage_const_0p1 ):
    sqrt_m = sqrt_spline(m)
    
    def K(rho):
        return -sqrt_m.derivative(rho, order=_sage_const_2 ) / sqrt_m(rho)

    def R(rho):
        if rho <= eps or rho >= pi - eps:
            rho = eps
        R11 = K(rho) + ((m.derivative(rho) * h.derivative(rho)) / (_sage_const_4  * m(rho) * h(rho)))
        R22 = (R11 / h(rho)) * m(rho)
        return matrix([[R11, _sage_const_0 ], [_sage_const_0 , R22]])

    return R if not return_K else (R, K)


def reparam(h, m, ds=_sage_const_0p1 ):
    l_spline_list = [(_sage_const_0 , _sage_const_0 )]
    def l_integrand(s): return sqrt(h(s)) if h(s) > _sage_const_0  else _sage_const_0 
    s_space = np.linspace(_sage_const_0 , pi, round(pi / ds))

    curr_int = _sage_const_0 
    for i, curr_s in enumerate(s_space[_sage_const_1 :]):
        sliver = numerical_integral(l_integrand, s_space[i], curr_s)[_sage_const_0 ]
        curr_int += sliver
        l_spline_list.append((curr_s, curr_int))

    l = spline(l_spline_list)
    l_inv = spline([(b, a) for a, b in l.list()])

    tot_s = l(pi)
    h_reparam = to_spline(lambda z: (tot_s / pi)**_sage_const_2 )
    m_reparam = spline([(rho, max(_sage_const_0 , m(l_inv(rho * tot_s / pi)))) for rho, _ in m.list()])

    return h_reparam, m_reparam


def add_cap(h, m):
    h_capped = spline(h.list())
    m_capped = spline(m.list())

    m_capped.append((_sage_const_0 , _sage_const_0 ))
    m_capped.append((pi, _sage_const_0 ))

    sqrt_m = sqrt_spline(m_capped)

    h_capped.append((_sage_const_0 , sqrt_m.derivative(_sage_const_0 )**_sage_const_2 ))
    h_capped.append((pi, sqrt_m.derivative(pi)**_sage_const_2 ))

    return h_capped, m_capped


def euler_step(h, m, dt, rho_space, eps, k_space=None, cap=True):
    if k_space is None:
        logging.info("\tComputing Ricci tensor")
        R = hm_to_ricci_tensor(h, m, eps=eps)
        def k(rho): return -_sage_const_2 *R(rho)
        k_space = [k(rho) for rho in rho_space]
    rho_k_space = list(zip(rho_space, k_space))

    logging.info("\tComputing h spline")
    h_next = spline([(rho, h(rho) + k[_sage_const_0 ][_sage_const_0 ]*dt) for rho, k in rho_k_space])
    logging.info("\tComputing m spline")
    m_next = spline([(rho, m(rho) + k[_sage_const_1 ][_sage_const_1 ]*dt) for rho, k in rho_k_space])

    if cap:
        h_next, m_next = add_cap(h_next, m_next)

    return h_next, m_next, k_space


def rk4_step(h1, m1, dt, eps=_sage_const_0p01 , drho=_sage_const_0p01 ):
    rho_space = np.linspace(eps, pi-eps, round((pi-_sage_const_2 *eps) / drho))

    logging.info("\tRunning rk4 step 1")
    h2, m2, k1_space = euler_step(h1, m1, dt/_sage_const_2 , rho_space, eps)

    logging.info("\n\tRunning rk4 step 2")
    _, _, k2_space = euler_step(h2, m2, dt/_sage_const_2 , rho_space, eps)
    h3, m3, _ = euler_step(h1, m1, dt/_sage_const_2 , rho_space, eps, k_space=k2_space)

    logging.info("\n\tRunning rk4 step 3")
    _, _, k3_space = euler_step(h3, m3, dt/_sage_const_2 , rho_space, eps)
    h4, m4, _ = euler_step(h1, m1, dt, rho_space, eps, k_space=k3_space)
    
    logging.info("\n\tRunning rk4 step 4")
    _, _, k4_space = euler_step(h4, m4, dt, rho_space, eps)

    k_space = [(k1 + _sage_const_2 *k2 + _sage_const_2 *k3 + k4)/_sage_const_6  for k1, k2, k3, k4 in zip(k1_space, k2_space, k3_space, k4_space)]
    h_next, m_next, _ = euler_step(h1, m1, dt, rho_space, eps, k_space=k_space)

    logging.info("\n")

    return h_next, m_next


# c3 = 0.766
# c5 = -0.091

c3 = _sage_const_0p021 
c5 = _sage_const_0p598 

__tmp__=var("rho"); h = symbolic_expression(_sage_const_1 ).function(rho)
__tmp__=var("rho"); m = symbolic_expression(((sin(rho) + c3*sin(_sage_const_3 *rho) + c5*sin(_sage_const_5 *rho))/(_sage_const_1  + _sage_const_3 *c3 + _sage_const_5 *c5))**_sage_const_2 ).function(rho)

srange = (_sage_const_0 , pi)
h = to_spline(h, srange)
m = to_spline(m, srange)
x, y = xy_splines_from_hm(h, m, srange, step_size=_sage_const_0p1 )
R, K = hm_to_ricci_tensor(h, m, return_K=True)

if plot_initial_curve:
    xy_plot = parametric_plot((x, y), (x.list()[_sage_const_0 ][_sage_const_0 ], x.list()[-_sage_const_1 ][_sage_const_0 ]))
    xy_plot.save(path("initial_curve_of_revolution.png"))
if plot_initial_m:
    plot(lambda z: sqrt(m(z)), srange, title="sqrt(m)").save(path("initial_sqrt_m.png"))
if plot_initial_h:
    plot(h, srange, title="h").save(path("initial_h.png"))
if plot_initial_R:
    def R11(rho): return R(rho)[_sage_const_0 ][_sage_const_0 ]
    def R22(rho): return R(rho)[_sage_const_1 ][_sage_const_1 ]
    plot(R11, srange, title="R11").save(path("initial_R11.png"))
    plot(R22, srange, title="R22").save(path("initial_R22.png"))
if plot_initial_K:
    plot(K, srange, marker=",", linestyle="", title="K").save(path("initial_K.png"))


# Ricci flow
dt = _sage_const_0p0001 
N = _sage_const_3001 
plot_gap = _sage_const_10 
reparam_gap = _sage_const_4 
space, dt = np.linspace(_sage_const_0 , dt*(N-_sage_const_1 ), N, retstep=True)
eps = _sage_const_0p1 
drho = _sage_const_0p1 

print("Running ricci flow...")
print(f"c3 = {c3}")
print(f"c5 = {c5}")
print(f"dt = {dt}")
print(f"N = {N}")
print(f"plot_gap = {plot_gap}")

curve_plots = []
revolved_plots = []
m_plots = []
h_plots = []
R11_plots = []
R22_plots = []
K_plots = []

for i in range(N):
    try:
        print(f"\nRK4: Iteration {i}/{N-_sage_const_1 }, t = {dt*i}")
        h, m = rk4_step(h, m, dt, eps=eps, drho=drho)

        logging.info("\tGetting x and y splines from h and m splines")
        x, y = xy_splines_from_hm(h, m, srange)
        
        if i % reparam_gap == _sage_const_0 :
            print("\tReparametrizing...")
            h, m = reparam(h, m)

        if i % plot_gap == _sage_const_0 :
            print("\tAppending plots")
            revolved_plots.append(parametric_plot3d(revolve(x, y), (_sage_const_0 , _sage_const_2 *pi), srange))
            if animate_curve:
                curve_plots.append(parametric_plot((x, y), srange))
            if animate_m:
                m_plots.append(plot(lambda z: sqrt(m(z)), srange, title="sqrt(m)"))
            if animate_h:
                h_plots.append(plot(h, srange, title="h"))
            if animate_R:
                R = hm_to_ricci_tensor(h, m)
                def R11(rho): return R(rho)[_sage_const_0 ][_sage_const_0 ]
                def R22(rho): return R(rho)[_sage_const_1 ][_sage_const_1 ]
                R11_plots.append(plot(R11, srange, title="R11"))
                R22_plots.append(plot(R22, srange, title="R22"))
            # if animate_K:
            #     K_plots.append(plot(K, srange, title="K"))
    except Exception as e:
        print(f"Encountered exception on iteration {i}/{N-_sage_const_1 }, t = {dt*i}:")
        print(repr(e))
        print("Terminating flow.")
        break

if animate_curve:
    print("Animating curve...")
    curve_anim = animate(curve_plots)
    print("Saving curve animation...")
    curve_anim.save(path("curve_flow.gif"), show_path=True)
if animate_m:
    print("Animating sqrt(m)...")
    m_anim = animate(m_plots)
    print("Saving sqrt(m) animation...")
    m_anim.save(path("sqrt_m_anim.gif"), show_path=True)
if animate_h:
    print("Animating h...")
    h_anim = animate(h_plots)
    print("Saving h animation...")
    h_anim.save(path("h_anim.gif"), show_path=True)
if animate_R:
    print("Animating R...")
    R11_anim = animate(R11_plots)
    R22_anim = animate(R22_plots)
    print("Saving R animation...")
    R11_anim.save(path("R11_anim.gif"), show_path=True)
    R22_anim.save(path("R22_anim.gif"), show_path=True)
# if animate_K:
#     print("Animating K...")
#     K_anim = animate(K_plots)
#     print("Saving K animation...")
#     K_anim.save(path("K_anim.gif"), show_path=True)

print("Animating surface flow...")
a_surf = animate(revolved_plots)
print("Saving surface flow...")
a_surf.save(path("surf_flow.html"), online=True, show_path=True)

